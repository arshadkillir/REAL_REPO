const Stripe = require('stripe'); const stripe = Stripe(process.env.STRIPE_SECRET_KEY); const { Tenant } = require('../models'); async function createCheckoutSession(req,res){ try{ const { tenantId, plan } = req.body; if(!tenantId || !plan) return res.status(400).json({ error:'tenantId and plan required' }); const priceMapping = { basic: process.env.PRICE_BASIC_ID, pro: process.env.PRICE_PRO_ID }; const domain = process.env.FRONTEND_URL || 'http://localhost:3000'; const session = await stripe.checkout.sessions.create({ payment_method_types: ['card'], mode: 'payment', line_items:[{ price: priceMapping[plan], quantity:1 }], success_url: `${domain}/?session_id={CHECKOUT_SESSION_ID}`, cancel_url: `${domain}/?canceled=true`, metadata:{ tenantId: String(tenantId), plan } }); res.json({ id: session.id, url: session.url }); }catch(e){ console.error(e); res.status(500).json({ error: e.message }); } } async function webhook(req,res){ const sig = req.headers['stripe-signature']; let event; try{ event = stripe.webhooks.constructEvent(req.rawBody, sig, process.env.STRIPE_WEBHOOK_SECRET); }catch(err){ console.error('Webhook signature failed', err.message); return res.status(400).send(`Webhook Error: ${err.message}`); } if(event.type==='checkout.session.completed'){ const sess = event.data.object; const tid = sess.metadata?.tenantId; const plan = sess.metadata?.plan; if(tid){ const t = await Tenant.findByPk(tid); if(t){ t.plan = plan; t.subscriptionStatus = 'active'; if(plan==='pro'){ t.features = { dinein:true, takeaway:true, delivery:true, inventory:true }; }else{ t.features = { dinein:true, takeaway:true, delivery:false, inventory:false }; } await t.save(); } } } res.json({ received:true }); } module.exports = { createCheckoutSession, webhook };
