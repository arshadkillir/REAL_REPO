const Stripe = require('stripe'); const stripe = Stripe(process.env.STRIPE_SECRET_KEY); const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET; const { Tenant } = require('../models'); // create checkout session
async function createCheckoutSession(req,res){ try{ const { tenantId, plan } = req.body; if(!tenantId || !plan) return res.status(400).json({ error:'tenantId and plan required' }); // define product prices for demo
  const priceMapping = { basic: 'price_1_basic_demo', pro: 'price_1_pro_demo' }; // in real usage replace with real price IDs
  const domain = process.env.FRONTEND_URL || 'http://localhost:3000'; const session = await stripe.checkout.sessions.create({ payment_method_types: ['card'], mode: 'payment', customer_email: req.body.email || undefined, line_items: [{ price: priceMapping[plan] || priceMapping.basic, quantity: 1 }], success_url: `${domain}/?session_id={CHECKOUT_SESSION_ID}`, cancel_url: `${domain}/?canceled=true`, metadata: { tenantId: String(tenantId), plan } }); res.json({ id: session.id, url: session.url }); }catch(e){ console.error(e); res.status(500).json({ error: e.message }); } }

// webhook to listen to checkout.session.completed
async function handleWebhookRaw(req,res){ const sig = req.headers['stripe-signature']; let event; try{ event = stripe.webhooks.constructEvent(req.rawBody, sig, endpointSecret); }catch(err){ console.error('Webhook signature verification failed.', err.message); return res.status(400).send(`Webhook Error: ${err.message}`); }
 if(event.type === 'checkout.session.completed'){ const session = event.data.object; const tid = session.metadata?.tenantId; const plan = session.metadata?.plan; if(tid){ const t = await Tenant.findByPk(tid); if(t){ t.plan = plan || t.plan; t.subscriptionStatus = 'active'; // toggle features based on plan
        if(plan === 'pro'){ t.features = { dinein:true, takeaway:true, delivery:true, inventory:true, purchases:true, accounting:true, kds:true, aggregators:true }; } else { t.features = { dinein:true, takeaway:true, delivery:false, inventory:false, purchases:false, accounting:false, kds:false, aggregators:false }; } await t.save(); } } }
 res.json({ received: true }); }

module.exports = { createCheckoutSession, handleWebhookRaw };